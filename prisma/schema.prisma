// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Next steps:
// 1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
// 2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.
// 3. Run prisma db pull to turn your database schema into a Prisma schema.
// 4. Run prisma generate to generate the Prisma Client. You can then start querying your database.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  main_image  String
  description String
  open_time   String
  close_time  String
  slug        String   @unique
  price       PRICE
  images      String[]
  location_id Int
  location    Location @relation(fields: [location_id], references: [id])
  cuisine_id  Int
  cuisine     Cuisine  @relation(fields: [cuisine_id], references: [id])
  items       Item[]
  create_at   DateTime @default(now())
  update_at   DateTime @updatedAt
  reviews     Review[]
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]
  create_at   DateTime     @default(now())
  update_at   DateTime     @updatedAt
}

model Cuisine {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]
  create_at   DateTime     @default(now())
  update_at   DateTime     @updatedAt
}

model Item {
  id            Int        @id @default(autoincrement())
  name          String
  price         String
  description   String
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  create_at     DateTime   @default(now())
  update_at     DateTime   @updatedAt
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  city       String
  email      String
  password   String
  phone      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  reviews    Review[]
}

model Review {
  id            Int        @id @default(autoincrement())
  first_name    String
  last_name     String
  text          String
  rating        Float
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}
